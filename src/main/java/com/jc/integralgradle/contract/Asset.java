package com.jc.integralgradle.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Asset extends Contract {
  public static final String[] BINARY_ARRAY = {"","7c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ea157600080fd5b505af1158015610eb5573d6000803e3d6000fd5b505050506040513d6020811015610ecb57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663e942b5168c6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f6163636f756e7400000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015610f9e578082015181840152602081019050610f83565b50505050905090810190601f168015610fcb5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015610feb57600080fd5b505af1158015610fff573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba748b87016040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600b8152602001807f61737365745f76616c756500000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156110ad57600080fd5b505af11580156110c1573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663bf2b70a18c838773ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561114757600080fd5b505af115801561115b573d6000803e3d6000fd5b505050506040513d602081101561117157600080fd5b81019080805190602001909291905050506040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b83811015611251578082015181840152602081019050611236565b50505050905090810190601f16801561127e5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561129f57600080fd5b505af11580156112b3573d6000803e3d6000fd5b505050506040513d60208110156112c957600080fd5b810190808051906020019092919050505050898b6040518082805190602001908083835b60208310151561131257805182526020820191506020810190506020830392506112ed565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208d6040518082805190602001908083835b6020831015156113755780518252602082019150602081019050602083039250611350565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207f8f6b9fa4d4bf04c7c1c3242d4a5c59ba22525b6761cf89e44becb27c606154bd8b6040518082815260200191505060405180910390a48798505b50505050505050509392505050565b60008060008060008060009450600093506000925061140a87612310565b8094508195505050600084141515611444577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9450611668565b61144c612855565b91508173ffffffffffffffffffffffffffffffffffffffff166328bb2117888473ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156114cf57600080fd5b505af11580156114e3573d6000803e3d6000fd5b505050506040513d60208110156114f957600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156115a757808201518184015260208101905061158c565b50505050905090810190601f1680156115d45780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156115f457600080fd5b505af1158015611608573d6000803e3d6000fd5b505050506040513d602081101561161e57600080fd5b8101908080519060200190929190505050905060018114156116435760009450611667565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe94505b5b866040518082805190602001908083835b60208310151561169e5780518252602082019150602081019050602083039250611679565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207fdf42929f45a62a9d5b7ca501222628890468c603682204595194d468c590c922866040518082815260200191505060405180910390a28495505050505050919050565b6000806000806000806000806000965060009550600094506117308b612310565b809650819750505060008614151561176a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9650611d55565b611772612855565b93508373ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156117d857600080fd5b505af11580156117ec573d6000803e3d6000fd5b505050506040513d602081101561180257600080fd5b810190808051906020019092919050505092508273ffffffffffffffffffffffffffffffffffffffff1663e942b5168c6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f6163636f756e7400000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156118d55780820151818401526020810190506118ba565b50505050905090810190601f1680156119025780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561192257600080fd5b505af1158015611936573d6000803e3d6000fd5b505050506001891415611a4457600091508985039150600082101515611a1b578273ffffffffffffffffffffffffffffffffffffffff16638a42ebe9836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600b8152602001807f61737365745f76616c756500000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156119fe57600080fd5b505af1158015611a12573d6000803e3d6000fd5b50505050611a3f565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd96505b611b07565b8273ffffffffffffffffffffffffffffffffffffffff16632ef8ba748b87016040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600b8152602001807f61737365745f76616c756500000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015611aee57600080fd5b505af1158015611b02573d6000803e3d6000fd5b505050505b8373ffffffffffffffffffffffffffffffffffffffff1663bf2b70a18c858773ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611b8957600080fd5b505af1158015611b9d573d6000803e3d6000fd5b505050506040513d6020811015611bb357600080fd5b81019080805190602001909291905050506040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b83811015611c93578082015181840152602081019050611c78565b50505050905090810190601f168015611cc05780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015611ce157600080fd5b505af1158015611cf5573d6000803e3d6000fd5b505050506040513d6020811015611d0b57600080fd5b810190808051906020019092919050505090506001811415611d305760009650611d54565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe96505b5b898b6040518082805190602001908083835b602083101515611d8c5780518252602082019150602081019050602083039250611d67565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207f8c645de90b47fdfe10d83e632db896212cdf134aa583efe2122bc7767ba79653896040518082815260200191505060405180910390a3869750505050505050509392505050565b60008060008060008060008095506000945060009350611e2089612310565b809550819650505060008514151561224257611e3a612855565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c","0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611ea057600080fd5b505af1158015611eb4573d6000803e3d6000fd5b505050506040513d6020811015611eca57600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f6163636f756e7400000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015611f9d578082015181840152602081019050611f82565b50505050905090810190601f168015611fca5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015611fea57600080fd5b505af1158015611ffe573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba74896040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600b8152602001807f61737365745f76616c756500000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156120aa57600080fd5b505af11580156120be573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac368a846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561217d578082015181840152602081019050612162565b50505050905090810190601f1680156121aa5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156121ca57600080fd5b505af11580156121de573d6000803e3d6000fd5b505050506040513d60208110156121f457600080fd5b810190808051906020019092919050505090506001811415612219576000955061223d565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe95505b612266565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff95505b87896040518082805190602001908083835b60208310151561229d5780518252602082019150602081019050602083039250612278565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207f91c95f04198617c60eaf2180fbca88fc192db379657df0e412a9f7dd4ebbe95d886040518082815260200191505060405180910390a385965050505050505092915050565b600080600080600080600061100194508473ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600b8152602001807f745f61737365745f6f776e000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156123c057600080fd5b505af11580156123d4573d6000803e3d6000fd5b505050506040513d60208110156123ea57600080fd5b810190808051906020019092919050505093508373ffffffffffffffffffffffffffffffffffffffff1663e8434e39898673ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561247e57600080fd5b505af1158015612492573d6000803e3d6000fd5b505050506040513d60208110156124a857600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561255657808201518184015260208101905061253b565b50505050905090810190601f1680156125835780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156125a357600080fd5b505af11580156125b7573d6000803e3d6000fd5b505050506040513d60208110156125cd57600080fd5b81019080805190602001909291905050509250600091508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561264857600080fd5b505af115801561265c573d6000803e3d6000fd5b505050506040513d602081101561267257600080fd5b8101908080519060200190929190505050600014156126b9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff828191509650965061284b565b8273ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561272957600080fd5b505af115801561273d573d6000803e3d6000fd5b505050506040513d602081101561275357600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600b8152602001807f61737365745f76616c7565000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561280857600080fd5b505af115801561281c573d6000803e3d6000fd5b505050506040513d602081101561283257600080fd5b8101908080519060200190929190505050819150965096505b5050505050915091565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600b8152602001807f745f61737365745f6f776e000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156128ff57600080fd5b505af1158015612913573d6000803e3d6000fd5b505050506040513d602081101561292957600080fd5b810190808051906020019092919050505090508092505050905600a165627a7a72305820f00c0813ff55fc568acb5d7a1e1a6bdf089a24317f2001e5211e9adafe3f2a310029"};

  public static final String BINARY = String.join("", BINARY_ARRAY);

  public static final String[] SM_BINARY_ARRAY = {"60806040523480156200001157600080fd5b506200002b62000031640100000000026401000000009004565b6200018c565b600061100190508073ffffffffffffffffffffffffffffffffffffffff1663c92a78016040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001806020018481038452600b8152602001807f745f61737365745f6f776e000000000000000000000000000000000000000000815250602001848103835260078152602001807f6163636f756e74000000000000000000000000000000000000000000000000008152506020018481038252600b8152602001807f61737365745f76616c75650000000000000000000000000000000000000000008152506020019350505050602060405180830381600087803b1580156200014b57600080fd5b505af115801562000160573d6000803e3d6000fd5b505050506040513d60208110156200017757600080fd5b81019080805190602001909291905050505050565b612970806200019c6000396000f30060806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063413da83b146100725780635b325d7814610103578063612d2bff14610187578063a91ac31114610254578063b433c7ca146102d1575b600080fd5b34801561007e57600080fd5b506100ed600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919080359060200190929190505050610358565b6040518082815260200191505060405180910390f35b34801561010f57600080fd5b5061016a600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610a4a565b604051808381526020018281526020019250505060405180910390f35b34801561019357600080fd5b5061023e600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050610f8f565b6040518082815260200191505060405180910390f35b34801561026057600080fd5b506102bb600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612023565b6040518082815260200191505060405180910390f35b3480156102dd57600080fd5b50610342600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050612346565b6040518082815260200191505060405180910390f35b6000806000806000806000806000965060009550600094506103798b610a4a565b80965081975050506000861415156103b3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff965061099e565b6103bb612855565b93508373ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561042157600080fd5b505af1158015610435573d6000803e3d6000fd5b505050506040513d602081101561044b57600080fd5b810190808051906020019092919050505092508273ffffffffffffffffffffffffffffffffffffffff16631a391cb48c6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f6163636f756e7400000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561051e578082015181840152602081019050610503565b50505050905090810190601f16801561054b5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561056b57600080fd5b505af115801561057f573d6000803e3d6000fd5b50505050600189141561068d57600091508985039150600082101515610664578273ffffffffffffffffffffffffffffffffffffffff1663f2f4ee6d836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600b8152602001807f61737365745f76616c756500000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561064757600080fd5b505af115801561065b573d6000803e3d6000fd5b50505050610688565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd96505b610750565b8273ffffffffffffffffffffffffffffffffffffffff1663def426988b87016040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600b8152602001807f61737365745f76616c756500000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561073757600080fd5b505af115801561074b573d6000803e3d6000fd5b505050505b8373ffffffffffffffffffffffffffffffffffffffff1663664b37d68c858773ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156107d257600080fd5b505af11580156107e6573d6000803e3d6000fd5b505050506040513d60208110156107fc57600080fd5b81019080805190602001909291905050506040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b838110156108dc5780820151818401526020810190506108c1565b50505050905090810190601f1680156109095780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561092a57600080fd5b505af115801561093e573d6000803e3d6000fd5b505050506040513d602081101561095457600080fd5b810190808051906020019092919050505090506001811415610979576000965061099d565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe96505b5b898b6040518082805190602001908083835b6020831015156109d557805182526020820191506020810190506020830392506109b0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207fd6f8017058860c615bfbad5084068534bfb9c0f5a6c0661c494aebac77013f79896040518082815260200191505060405180910390a3869750505050505050509392505050565b600080600080600080600061100194508473ffffffffffffffffffffffffffffffffffffffff166359a48b656040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600b8152602001807f745f61737365745f6f776e000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015610afa57600080fd5b505af1158015610b0e573d6000803e3d6000fd5b505050506040513d6020811015610b2457600080fd5b810190808051906020019092919050505093508373ffffffffffffffffffffffffffffffffffffffff1663d8ac5957898673ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610bb857600080fd5b505af1158015610bcc573d6000803e3d6000fd5b505050506040513d6020811015610be257600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015610c90578082015181840152602081019050610c75565b50505050905090810190601f168015610cbd5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015610cdd57600080fd5b505af1158015610cf1573d6000803e3d6000fd5b505050506040513d6020811015610d0757600080fd5b81019080805190602001909291905050509250600091508273ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610d8257600080fd5b505af1158015610d96573d6000803e3d6000fd5b505050506040513d6020811015610dac57600080fd5b810190808051906020019092919050505060001415610df3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8281915096509650610f85565b8273ffffffffffffffffffffffffffffffffffffffff16633dd2b61460006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015610e6357600080fd5b","505af1158015610e77573d6000803e3d6000fd5b505050506040513d6020811015610e8d57600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600b8152602001807f61737365745f76616c7565000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015610f4257600080fd5b505af1158015610f56573d6000803e3d6000fd5b505050506040513d6020811015610f6c57600080fd5b8101908080519060200190929190505050819150965096505b5050505050915091565b6000806000806000806000806000809750600096506000955060009450610fb58c610a4a565b80975081985050506000871415156110f0577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9750898b6040518082805190602001908083835b6020831015156110215780518252602082019150602081019050602083039250610ffc565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208d6040518082805190602001908083835b602083101515611084578051825260208201915060208101905060208303925061105f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207f105af2c562df33af7eaa9de5fb0c18d8d30f281a18f95a8f76b44353a322693c8b6040518082815260200191505060405180910390a4879850612014565b6110f98b610a4a565b8096508198505050600087141515611234577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9750898b6040518082805190602001908083835b6020831015156111655780518252602082019150602081019050602083039250611140565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208d6040518082805190602001908083835b6020831015156111c857805182526020820191506020810190506020830392506111a3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207f105af2c562df33af7eaa9de5fb0c18d8d30f281a18f95a8f76b44353a322693c8b6040518082815260200191505060405180910390a4879850612014565b89861015611365577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd9750898b6040518082805190602001908083835b6020831015156112965780518252602082019150602081019050602083039250611271565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208d6040518082805190602001908083835b6020831015156112f957805182526020820191506020810190506020830392506112d4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207f105af2c562df33af7eaa9de5fb0c18d8d30f281a18f95a8f76b44353a322693c8b6040518082815260200191505060405180910390a4879850612014565b848a86011015611498577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc9750898b6040518082805190602001908083835b6020831015156113c957805182526020820191506020810190506020830392506113a4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208d6040518082805190602001908083835b60208310151561142c5780518252602082019150602081019050602083039250611407565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207f105af2c562df33af7eaa9de5fb0c18d8d30f281a18f95a8f76b44353a322693c8b6040518082815260200191505060405180910390a4879850612014565b6114a0612855565b93508373ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561150657600080fd5b505af115801561151a573d6000803e3d6000fd5b505050506040513d602081101561153057600080fd5b810190808051906020019092919050505092508273ffffffffffffffffffffffffffffffffffffffff16631a391cb48d6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f6163636f756e7400000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156116035780820151818401526020810190506115e8565b50505050905090810190601f1680156116305780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561165057600080fd5b505af1158015611664573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663def426988b88036040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600b8152602001807f61737365745f76616c756500000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561171257600080fd5b505af1158015611726573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663664b37d68d858773ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156117ac57600080fd5b505af11580156117c0573d6000803e3d6000fd5b505050506040513d60208110156117d657600080fd5b81019080805190602001909291905050506040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b838110156118b657808201518184015260208101905061189b565b50505050905090810190601f1680156118e35780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561190457600080fd5b505af1158015611918573d6000803e3d6000fd5b505050506040513d602081101561192e57600080fd5b81019080805190602001909291905050509150600182141515611a74577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb9750898b6040518082805190602001908083835b6020831015156119a55780518252602082019150602081019050602083039250611980565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208d6040518082805190602001908083835b602083101515611a0857805182526020820191506020810190506020830392506119e3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207f105af2c562df33af7eaa9de5fb0c18d8d30f281a18f95a8f76b44353a322693c8b6040518082815260200191505060405180910390a4879850612014565b8373ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611ad857600080fd5b505af1158015611aec573d6000803e3d6000fd5b505050506040513d6020811015611b0257600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff16631a391cb48c6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f6163636f756e7400000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015611bd5578082015181840152602081019050611bba565b50505050905090810190601f168015611c025780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015611c2257600080fd5b505af1158015611c36573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663def426988b87016040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600b8152602001807f61737365745f76616c756500000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015611ce457600080fd5b505af1158015611cf8573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663664b37d68c838773ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611d7e57600080fd5b505af1158015611d92573d6000803e3d6000fd5b505050506040513d6020811015611da857600080fd5b81019080805190602001909291905050506040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182810382528581815181526020019150805190","6020019080838360005b83811015611e88578082015181840152602081019050611e6d565b50505050905090810190601f168015611eb55780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015611ed657600080fd5b505af1158015611eea573d6000803e3d6000fd5b505050506040513d6020811015611f0057600080fd5b810190808051906020019092919050505050898b6040518082805190602001908083835b602083101515611f495780518252602082019150602081019050602083039250611f24565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208d6040518082805190602001908083835b602083101515611fac5780518252602082019150602081019050602083039250611f87565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207f105af2c562df33af7eaa9de5fb0c18d8d30f281a18f95a8f76b44353a322693c8b6040518082815260200191505060405180910390a48798505b50505050505050509392505050565b60008060008060008060009450600093506000925061204187610a4a565b809450819550505060008414151561207b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff945061229f565b612083612855565b91508173ffffffffffffffffffffffffffffffffffffffff166309ff42f0888473ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561210657600080fd5b505af115801561211a573d6000803e3d6000fd5b505050506040513d602081101561213057600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156121de5780820151818401526020810190506121c3565b50505050905090810190601f16801561220b5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561222b57600080fd5b505af115801561223f573d6000803e3d6000fd5b505050506040513d602081101561225557600080fd5b81019080805190602001909291905050509050600181141561227a576000945061229e565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe94505b5b866040518082805190602001908083835b6020831015156122d557805182526020820191506020810190506020830392506122b0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207f24127f251f1c777f688b8f8b5b64fca55b8eeb459b95902182246d594466aff1866040518082815260200191505060405180910390a28495505050505050919050565b6000806000806000806000809550600094506000935061236589610a4a565b80955081965050506000851415156127875761237f612855565b92508273ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156123e557600080fd5b505af11580156123f9573d6000803e3d6000fd5b505050506040513d602081101561240f57600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff16631a391cb48a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f6163636f756e7400000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156124e25780820151818401526020810190506124c7565b50505050905090810190601f16801561250f5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561252f57600080fd5b505af1158015612543573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663def42698896040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600b8152602001807f61737365745f76616c756500000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156125ef57600080fd5b505af1158015612603573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16634c6f30c08a846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156126c25780820151818401526020810190506126a7565b50505050905090810190601f1680156126ef5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561270f57600080fd5b505af1158015612723573d6000803e3d6000fd5b505050506040513d602081101561273957600080fd5b81019080805190602001909291905050509050600181141561275e5760009550612782565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe95505b6127ab565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff95505b87896040518082805190602001908083835b6020831015156127e257805182526020820191506020810190506020830392506127bd565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207f7ac7a04970319ae8fc5b92fe177d000fee3c00c92f8e78aae13d6571f17c351f886040518082815260200191505060405180910390a385965050505050505092915050565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff166359a48b656040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600b8152602001807f745f61737365745f6f776e000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156128ff57600080fd5b505af1158015612913573d6000803e3d6000fd5b505050506040513d602081101561292957600080fd5b810190808051906020019092919050505090508092505050905600a165627a7a72305820a5b8ec2acf501879046a7218ed99573ff7dd15ad77009d7a5e6d0477c8ff4e1c0029"};

  public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

  public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"from_account\",\"type\":\"string\"},{\"name\":\"to_account\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"}],\"name\":\"deleteAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"},{\"name\":\"asset_value\",\"type\":\"uint256\"},{\"name\":\"isReduce\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"},{\"name\":\"asset_value\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"asset_value\",\"type\":\"uint256\"}],\"name\":\"RegisterEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"asset_value\",\"type\":\"uint256\"}],\"name\":\"UpdateEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"string\"}],\"name\":\"DeleteEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":true,\"name\":\"from_account\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"to_account\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferEvent\",\"type\":\"event\"}]"};

  public static final String ABI = String.join("", ABI_ARRAY);

  public static final String FUNC_TRANSFER = "transfer";

  public static final String FUNC_DELETEACCOUNT = "deleteAccount";

  public static final String FUNC_UPDATE = "update";

  public static final String FUNC_REGISTER = "register";

  public static final String FUNC_SELECT = "select";

  public static final Event REGISTEREVENT_EVENT = new Event("RegisterEvent",
          Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Uint256>(true) {}));
  ;

  public static final Event UPDATEEVENT_EVENT = new Event("UpdateEvent",
          Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Uint256>(true) {}));
  ;

  public static final Event DELETEEVENT_EVENT = new Event("DeleteEvent",
          Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>(true) {}));
  ;

  public static final Event TRANSFEREVENT_EVENT = new Event("TransferEvent",
          Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Uint256>(true) {}));
  ;

  protected Asset(String contractAddress, Client client, CryptoKeyPair credential) {
    super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
  }

  public static String getBinary(CryptoSuite cryptoSuite) {
    return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
  }

  public TransactionReceipt transfer(String from_account, String to_account, BigInteger amount) {
    final Function function = new Function(
            FUNC_TRANSFER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(from_account),
                    new org.fisco.bcos.sdk.abi.datatypes.Utf8String(to_account),
                    new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public void transfer(String from_account, String to_account, BigInteger amount, TransactionCallback callback) {
    final Function function = new Function(
            FUNC_TRANSFER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(from_account),
                    new org.fisco.bcos.sdk.abi.datatypes.Utf8String(to_account),
                    new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
            Collections.<TypeReference<?>>emptyList());
    asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForTransfer(String from_account, String to_account, BigInteger amount) {
    final Function function = new Function(
            FUNC_TRANSFER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(from_account),
                    new org.fisco.bcos.sdk.abi.datatypes.Utf8String(to_account),
                    new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple3<String, String, BigInteger> getTransferInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function = new Function(FUNC_TRANSFER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple3<String, String, BigInteger>(

            (String) results.get(0).getValue(),
            (String) results.get(1).getValue(),
            (BigInteger) results.get(2).getValue()
    );
  }

  public Tuple1<BigInteger> getTransferOutput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getOutput();
    final Function function = new Function(FUNC_TRANSFER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<BigInteger>(

            (BigInteger) results.get(0).getValue()
    );
  }

  public TransactionReceipt deleteAccount(String account) {
    final Function function = new Function(
            FUNC_DELETEACCOUNT,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public void deleteAccount(String account, TransactionCallback callback) {
    final Function function = new Function(
            FUNC_DELETEACCOUNT,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account)),
            Collections.<TypeReference<?>>emptyList());
    asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForDeleteAccount(String account) {
    final Function function = new Function(
            FUNC_DELETEACCOUNT,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getDeleteAccountInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function = new Function(FUNC_DELETEACCOUNT,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>(

            (String) results.get(0).getValue()
    );
  }

  public Tuple1<BigInteger> getDeleteAccountOutput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getOutput();
    final Function function = new Function(FUNC_DELETEACCOUNT,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<BigInteger>(

            (BigInteger) results.get(0).getValue()
    );
  }

  public TransactionReceipt update(String account, BigInteger asset_value, BigInteger isReduce) {
    final Function function = new Function(
            FUNC_UPDATE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account),
                    new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(asset_value),
                    new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(isReduce)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public void update(String account, BigInteger asset_value, BigInteger isReduce, TransactionCallback callback) {
    final Function function = new Function(
            FUNC_UPDATE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account),
                    new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(asset_value),
                    new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(isReduce)),
            Collections.<TypeReference<?>>emptyList());
    asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForUpdate(String account, BigInteger asset_value, BigInteger isReduce) {
    final Function function = new Function(
            FUNC_UPDATE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account),
                    new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(asset_value),
                    new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(isReduce)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple3<String, BigInteger, BigInteger> getUpdateInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function = new Function(FUNC_UPDATE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple3<String, BigInteger, BigInteger>(

            (String) results.get(0).getValue(),
            (BigInteger) results.get(1).getValue(),
            (BigInteger) results.get(2).getValue()
    );
  }

  public Tuple1<BigInteger> getUpdateOutput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getOutput();
    final Function function = new Function(FUNC_UPDATE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<BigInteger>(

            (BigInteger) results.get(0).getValue()
    );
  }

  public TransactionReceipt register(String account, BigInteger asset_value) {
    final Function function = new Function(
            FUNC_REGISTER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account),
                    new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(asset_value)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public void register(String account, BigInteger asset_value, TransactionCallback callback) {
    final Function function = new Function(
            FUNC_REGISTER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account),
                    new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(asset_value)),
            Collections.<TypeReference<?>>emptyList());
    asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForRegister(String account, BigInteger asset_value) {
    final Function function = new Function(
            FUNC_REGISTER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account),
                    new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(asset_value)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple2<String, BigInteger> getRegisterInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function = new Function(FUNC_REGISTER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<String, BigInteger>(

            (String) results.get(0).getValue(),
            (BigInteger) results.get(1).getValue()
    );
  }

  public Tuple1<BigInteger> getRegisterOutput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getOutput();
    final Function function = new Function(FUNC_REGISTER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<BigInteger>(

            (BigInteger) results.get(0).getValue()
    );
  }

  public Tuple2<BigInteger, BigInteger> select(String account) throws ContractException {
    final Function function = new Function(FUNC_SELECT,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}));
    List<Type> results = executeCallWithMultipleValueReturn(function);
    return new Tuple2<BigInteger, BigInteger>(
            (BigInteger) results.get(0).getValue(),
            (BigInteger) results.get(1).getValue());
  }

  public List<RegisterEventEventResponse> getRegisterEventEvents(TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTEREVENT_EVENT, transactionReceipt);
    ArrayList<RegisterEventEventResponse> responses = new ArrayList<RegisterEventEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      RegisterEventEventResponse typedResponse = new RegisterEventEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.account = (byte[]) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.asset_value = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
      typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public void subscribeRegisterEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
    String topic0 = eventEncoder.encode(REGISTEREVENT_EVENT);
    subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
  }

  public void subscribeRegisterEventEvent(EventCallback callback) {
    String topic0 = eventEncoder.encode(REGISTEREVENT_EVENT);
    subscribeEvent(ABI,BINARY,topic0,callback);
  }

  public List<UpdateEventEventResponse> getUpdateEventEvents(TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEEVENT_EVENT, transactionReceipt);
    ArrayList<UpdateEventEventResponse> responses = new ArrayList<UpdateEventEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      UpdateEventEventResponse typedResponse = new UpdateEventEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.account = (byte[]) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.asset_value = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
      typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public void subscribeUpdateEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
    String topic0 = eventEncoder.encode(UPDATEEVENT_EVENT);
    subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
  }

  public void subscribeUpdateEventEvent(EventCallback callback) {
    String topic0 = eventEncoder.encode(UPDATEEVENT_EVENT);
    subscribeEvent(ABI,BINARY,topic0,callback);
  }

  public List<DeleteEventEventResponse> getDeleteEventEvents(TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEEVENT_EVENT, transactionReceipt);
    ArrayList<DeleteEventEventResponse> responses = new ArrayList<DeleteEventEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      DeleteEventEventResponse typedResponse = new DeleteEventEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.account = (byte[]) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public void subscribeDeleteEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
    String topic0 = eventEncoder.encode(DELETEEVENT_EVENT);
    subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
  }

  public void subscribeDeleteEventEvent(EventCallback callback) {
    String topic0 = eventEncoder.encode(DELETEEVENT_EVENT);
    subscribeEvent(ABI,BINARY,topic0,callback);
  }

  public List<TransferEventEventResponse> getTransferEventEvents(TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFEREVENT_EVENT, transactionReceipt);
    ArrayList<TransferEventEventResponse> responses = new ArrayList<TransferEventEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      TransferEventEventResponse typedResponse = new TransferEventEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.from_account = (byte[]) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.to_account = (byte[]) eventValues.getIndexedValues().get(1).getValue();
      typedResponse.amount = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
      typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public void subscribeTransferEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
    String topic0 = eventEncoder.encode(TRANSFEREVENT_EVENT);
    subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
  }

  public void subscribeTransferEventEvent(EventCallback callback) {
    String topic0 = eventEncoder.encode(TRANSFEREVENT_EVENT);
    subscribeEvent(ABI,BINARY,topic0,callback);
  }

  public static Asset load(String contractAddress, Client client, CryptoKeyPair credential) {
    return new Asset(contractAddress, client, credential);
  }

  public static Asset deploy(Client client, CryptoKeyPair credential) throws ContractException {
    return deploy(Asset.class, client, credential, getBinary(client.getCryptoSuite()), "");
  }

  public static class RegisterEventEventResponse {
    public TransactionReceipt.Logs log;

    public byte[] account;

    public BigInteger asset_value;

    public BigInteger ret;
  }

  public static class UpdateEventEventResponse {
    public TransactionReceipt.Logs log;

    public byte[] account;

    public BigInteger asset_value;

    public BigInteger ret;
  }

  public static class DeleteEventEventResponse {
    public TransactionReceipt.Logs log;

    public byte[] account;

    public BigInteger ret;
  }

  public static class TransferEventEventResponse {
    public TransactionReceipt.Logs log;

    public byte[] from_account;

    public byte[] to_account;

    public BigInteger amount;

    public BigInteger ret;
  }
}
